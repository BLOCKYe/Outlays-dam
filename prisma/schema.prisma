// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id            String         @id @unique @default(uuid())
  email         String         @unique
  isVerified    Boolean        @default(false)
  name          String
  password      String
  refreshTokens RefreshToken[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  operations    Operation[]
  categories    Category[]
  goals         Goal[]
  config        Config?
}

model RefreshToken {
  id          String   @id @unique @default(uuid())
  hashedToken String
  userId      String
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Operation {
  id          String     @id @unique @default(uuid())
  title       String
  description String
  type        String
  date        String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  value       Decimal
  categories  Category[]
}

model Category {
  id         String      @id @unique @default(uuid())
  name       String
  color      String
  userId     String
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  operations Operation[]
}

model Goal {
  id          String   @id @unique @default(uuid())
  title       String
  description String
  startDate   String
  endDate     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  reached     Boolean  @default(false)
  reachedDate String?
  goalValue   Decimal
  type        String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Config {
  id             String   @id @unique @default(uuid())
  userId         String   @unique
  user           User     @relation(fields: [userId], references: [id])
  updatedAt      DateTime @updatedAt
  defaultSection String
}
